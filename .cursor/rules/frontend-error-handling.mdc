# 프론트엔드 에러 처리 규칙

- 모든 API 요청은 axios 인스턴스(apiClient.ts)를 사용한다.
- axios response 인터셉터에서 errorNormalizer를 통해 에러를 NormalizedError 포맷으로 변환하여 throw한다.
- errorNormalizer는 `{ success, errorCode, message, metadata }` 구조를 보장한다.
- 각 API 함수에서는 try/catch 없이 에러를 throw만 하며, 컴포넌트(UI)에서만 try/catch로 NormalizedError를 단언하여 사용한다.
- 컴포넌트에서는 `error as NormalizedError`로 타입 단언 후, errorCode, message, metadata를 기반으로 UX를 처리한다.
- 에러 메시지는 백엔드에서 내려온 message + (필요시 metadata.reason 등)으로 일관되게 표시한다.
- NormalizedError 타입은 src/render/api/error.type.ts에 정의되어 있으며, 프로젝트 전체에서 재사용한다.
- 직접 errorNormalizer를 호출하지 않고, 인터셉터에서 이미 정규화된 에러만 사용한다.
- 예시:
  ```tsx
  try {
    await apiCall()
  } catch (error) {
    const err = error as NormalizedError
    showToast(err.message)
  }
  ```

description:
globs:
alwaysApply: false
---
