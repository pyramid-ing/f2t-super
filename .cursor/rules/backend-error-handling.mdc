# 백엔드 에러 처리 규칙

- 모든 도메인/서비스/컨트롤러에서 에러 발생 시 반드시 CustomHttpException을 throw한다.
- CustomHttpException은 ErrorCode Enum과 metadata(추가 정보)를 인자로 받는다.
- ErrorCode Enum은 src/main/common/errors/error-code.enum.ts에 정의되어 있으며, AI, GCS, 외부 API, 데이터 없음 등 도메인별로 세분화되어 있다.
- ErrorCodeMap(src/main/common/errors/error-code.map.ts)에서 각 코드별 status, message 핸들러를 정의하며, message 핸들러는 metadata를 기반으로 동적 메시지를 생성할 수 있다.
- 글로벌 ExceptionFilter(global-exception.filter.ts)에서 CustomHttpException을 감지하여, ErrorCodeMap을 통해 HTTP status, message, metadata를 일관된 포맷으로 응답한다.
- 서비스/컨트롤러에서는 throw new CustomHttpException(ErrorCode.XXX, { ... }) 패턴만 사용한다. (기존 HttpException, Error 등은 사용하지 않는다)
- 에러 메시지는 message 핸들러에서 metadata.reason, length, detail 등 추가 정보를 포함할 수 있도록 구현한다.
- 프론트엔드는 항상 { success: false, errorCode, message, metadata } 구조로 에러를 받는다.
- 예시:
  ```ts
  throw new CustomHttpException(ErrorCode.AI_KEY_INVALID, { reason: 'API 키가 유효하지 않습니다.' })
  ```
- `CustomHttpException`을 사용할 때, message(고정 메시지)는 코드에서 직접 작성하지 않는다.
- 고정 메시지는 반드시 `ErrorCodeMap`에서 관리한다.
- 의미 없는 meta(예: responseData, error.message 등)는 넘기지 않는다.
- 실제 메시지에 인자가 필요한 경우(예: quota exceeded의 retryDelay, provider 등)만 meta를 넘긴다.
- 예시 (잘못된 방식):
  ```ts
  throw new CustomHttpException(ErrorCode.SEARXNG_SEARCH_FAILED, { message: 'Searxng 검색에 실패했습니다.' })
  throw new CustomHttpException(ErrorCode.SEARXNG_SEARCH_FAILED, { responseData: error.response?.data })
  ```
- 예시 (권장 방식):
  ```ts
  throw new CustomHttpException(ErrorCode.SEARXNG_SEARCH_FAILED)
  throw new CustomHttpException(ErrorCode.AI_QUOTA_EXCEEDED, { retryDelay, provider })
  ```
- 즉, message 필드는 ErrorCodeMap에서 자동으로 생성되며, meta는 메시지에 동적으로 인자가 필요한 경우에만 넘긴다.

description:
globs:
alwaysApply: false
---
